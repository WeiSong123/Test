package com.ymhw.website.model;

import java.util.HashSet;
import java.util.List;

import com.jfinal.kit.StrKit;
import com.ymhw.website.model.base.BaseActivity;
import com.ymhw.website.utils.DateUtil;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Activity extends BaseActivity<Activity> {
	public static final Activity dao = new Activity();
	
	/**
	 * 通过活动id查询审核通过的活动（即页面显示的活动）
	 * @param activityId
	 * @return
	 */
	public Activity queryById(int activityId)
	{
		return dao.findFirst("select *,DATEDIFF(deadline,NOW()) as remainDays  from activity where id = ? and isValid = 1 and checkStatus = 3",activityId);
	}
	
	/**
	 * 通过活动id查询未被删除的活动（isValid = 1）
	 * @param activityId
	 * @return
	 */
	public Activity queryValidById(int activityId)
	{
		return dao.findFirst("select a.*,b.name as propertyname from activity a,activityproperty b where a.id = ? and a.isValid = 1 and b.isValid = 1 and a.property = b.id",activityId);
	}
	
	/**
	 * <p>查询有折扣的活动数量,主要用于活动主页中的【更多优惠】</p>
	 * @param num 
	 * @return
	 */
	public List<Activity> queryTopDisount(int num)
	{
		return dao.find("select *  from activity where isValid = 1  and checkStatus = 3 ORDER BY disount DESC LIMIT ?", num);
	}
	
	/**
	 * <p>查询推荐的活动,主要用于活动主页中的【热门推荐】</p>
	 * @param num
	 * @return
	 */
	public List<Activity> queryRecommendAct(int num)
	{
		return dao.find("select *  from activity where isValid = 1 and checkStatus = 3 and isRecommend = 1 order by publishTime DESC LIMIT ?", num);
	}
	
	/**
	 * 热门活动查询
	 * @param num
	 * @return
	 */
	public List<Activity> queryHot(int num)
	{
		return dao.find("select id,pic,title,cost,`desc` from activity where isValid = 1 and checkStatus = 3 order by publishTime DESC LIMIT ?", num);
	}
	/**
	 * 搜索页面的活动列表信息
	 * @param num
	 * @return
	 */
	public List<Activity> querySearchList(int num)
	{
		return dao.find("select a.id,a.pic,a.title,a.cost,a.`desc`,a.publishTime,u.account from activity a,user u where a.isValid = 1 and a.checkStatus = 3 and substring_index(a.leaders,',',1) = u.id order by a.publishTime DESC LIMIT ?", num);
	}
	
	/**
	 * 待审核活动列表
	 * @return
	 */
	public List<Activity> queryCheckActList()
	{
		return dao.find("select id,title,cost,`desc`,publishTime from activity where isValid = 1 and checkStatus = 1 order by publishTime DESC");
	}
	
	/**
	 * 根据某个活动id查询对应待审核活动
	 * @return
	 */
	public Activity queryCheckAct(int actid)
	{
		return dao.findFirst("select a.*,b.name as propertyname from activity a,activityproperty b  where a.isValid = 1 and a.checkStatus = 1 and b.isValid = 1 and a.id = ? and a.property = b.id", actid);
	}
	
	public List<Activity> queryListByLeader(int leaderId)
	{
		return dao.find("SELECT id,title,`desc`,pic,publishTime,checkStatus,checkMsg FROM activity WHERE isValid =1 and substring_index(leaders,',',1) = ? order by publishTime desc", leaderId);
	}
	
	public List<Activity> queryValidListByLeader(int leaderId,int activityId)
	{
		return dao.find("SELECT id,title,`desc`,pic,publishTime,checkStatus,checkMsg FROM activity WHERE isValid =1 and checkStatus = 3 and id !=? and substring_index(leaders,',',1) = ? order by publishTime desc",activityId, leaderId);
	}
	
	/**
	 * 根据活动类型来查询活动
	 * @param typeId
	 * @param displayNum
	 * @return
	 */
	public List<Activity> queryByType(int typeId, int displayNum)
	{
		return dao.find("SELECT id,pic,title,cost,`desc`,startTime,enteredNum FROM activity WHERE isValid =1 and checkStatus = 3 and FIND_IN_SET(?,type) > 0 order by publishTime desc limit ?", typeId, displayNum);
	}
	
	/**
	 * 根据活动类型来查询活动
	 * @param typeId
	 * @param displayNum
	 * @return
	 */
	public List<Activity> queryByType2(int typeId, int displayNum)
	{
		if (typeId == 0 && displayNum == 0) {
			return dao.find("SELECT id,pic,title,property,cost,`desc`,gatherPlace,startTime,endTime,totalNum,confirmedNum,enteredNum FROM activity WHERE isValid =1 and checkStatus = 3  order by publishTime desc");
		} else if (typeId != 0 && displayNum == 0) {
			return dao.find("SELECT id,pic,title,property,cost,`desc`,gatherPlace,startTime,endTime,totalNum,confirmedNum,enteredNum FROM activity WHERE isValid =1 and checkStatus = 3 and FIND_IN_SET(?,type) > 0 order by publishTime desc", typeId);
		} else if (typeId == 0 && displayNum != 0) {
			return dao.find("SELECT id,pic,title,property,cost,`desc`,gatherPlace,startTime,endTime,totalNum,confirmedNum,enteredNum FROM activity WHERE isValid =1 and checkStatus = 3  order by publishTime desc limit ?", displayNum);
		} else {
			return dao.find("SELECT id,pic,title,property,cost,`desc`,gatherPlace,startTime,endTime,totalNum,confirmedNum,enteredNum FROM activity WHERE isValid =1 and checkStatus = 3 and FIND_IN_SET(?,type) > 0 order by publishTime desc limit ?", typeId, displayNum);
		}
		
	}
	
	/**
	 * 查询热门线路
	 * @param hotNum
	 * @return
	 */
	public List<Activity> queryHotline(int hotNum)
	{
		return dao.find("select id,pic,title,cost,`desc` FROM activity WHERE isValid =1 and checkStatus = 3 and (isRecommend = 1 or top = 1) order by publishTime desc limit ?", hotNum);
	}
	
	public List<Activity> queryByConditionEx(String types, String contents, String times)
	{
		String startTime = "";
		String endTime = "";
		if (!StrKit.isBlank(times))
		{
			if (times.equals("1")){
				startTime = DateUtil.getThisMonthStart();
				endTime = DateUtil.getThisMonthEnd();
			}else if (times.equals("2")){
				startTime = DateUtil.getNextWeekStart();
				endTime = DateUtil.getNextWeekEnd();
			}else if (times.equals("3")){
				startTime = DateUtil.getThisMonthStart();
				endTime = DateUtil.getThisMonthEnd();
			}else if (times.equals("4")){
				startTime = DateUtil.getNextMonthStart();
				endTime = DateUtil.getNextMonthEnd();
			}
		}
		
		String sql = "SELECT id,title,pic,type,`desc`,content,cost,publishTime FROM activity WHERE isValid = 1 and checkStatus = 3 ";
		String sqlEnd = " order by publishTime desc";
		if(!StrKit.isBlank(types) && StrKit.isBlank(contents) && StrKit.isBlank(times)){
			sql += " and is_mixed(type,?) = 1 " + sqlEnd;
			return dao.find(sql,types);
		}else if (StrKit.isBlank(types) && !StrKit.isBlank(contents) && StrKit.isBlank(times)){
			sql += " and is_mixed(content,?) = 1 " + sqlEnd;;
			return dao.find(sql,types);
		}else if (StrKit.isBlank(types) && StrKit.isBlank(contents) && !StrKit.isBlank(times)){
			sql += " and publishTime BETWEEN ? and ? " + sqlEnd;
			return dao.find(sql,startTime,endTime);
		}else if (!StrKit.isBlank(types) && !StrKit.isBlank(contents) && StrKit.isBlank(times)){
			sql += " and is_mixed(type,?) = 1 and is_mixed(content,?) = 1 " + sqlEnd;
			return dao.find(sql,types,contents);
		}else if (!StrKit.isBlank(types) && StrKit.isBlank(contents) && !StrKit.isBlank(times)){
			sql += " and is_mixed(type,?) = 1 and publishTime BETWEEN ? and ? " + sqlEnd;
			return dao.find(sql,types,startTime, endTime);
		}else if (StrKit.isBlank(types) && !StrKit.isBlank(contents) && !StrKit.isBlank(times)){
			sql += " and is_mixed(content,?) = 1 and publishTime BETWEEN ? and ? " + sqlEnd;
			return dao.find(sql,contents,startTime, endTime);
		}else if (!StrKit.isBlank(types) && !StrKit.isBlank(contents) && !StrKit.isBlank(times)){
			sql += " and is_mixed(type,?) = 1 and is_mixed(content,?) = 1 and publishTime BETWEEN ? and ? " + sqlEnd;
			return dao.find(sql,types, contents, startTime, endTime);
		}else {
			return Activity.dao.querySearchList(6);
		}
	}
	
	public List<Activity> queryByCondition(String types, String contents, String times)
	{
		List<Activity> activities = dao.queryByCondition(types, contents, times);
		System.out.println("size : " + activities.size());
		if (activities != null && activities.size() != 0)
		{
			removeDuplicate(activities);
		}
		return activities;
	}
	
	public String getLeaderByAct(int activityId)
	{
		Activity activity = dao.findFirst("select leaders from activity where id = ?",activityId);
		if (activity != null)
		{
			return activity.getLeaders().split(",")[0];
		}
		return "";
	}
	
	public List<Activity> queryAll()
	{
		return dao.find("select a.id,a.title,a.desc,a.publishTime,a.deadline,a.checkStatus,u.account,u.name from activity a,user u"
				+ " where a.isValid =1 and u.isValid = 1 and substring_index(a.leaders,',',1) = u.id order by a.publishTime desc");
	}
	/**
	 * list数据去重
	 * @param list
	 */
	@SuppressWarnings("unchecked")
	public static void removeDuplicate(@SuppressWarnings("rawtypes")List list) {
	    @SuppressWarnings({ "rawtypes" })
		HashSet h = new HashSet(list);
	    list.clear();
	    list.addAll(h);
	}
	
	/**
	 * 根据关键字搜索活动
	 * @param keyword
	 * @return
	 */
	public int searchByKeyword(String keyword) {
		Activity activity = dao.findFirst("select * from activity where checkStatus = 3 and title like ?", '%' + keyword + '%');
		if (activity != null) {
			return activity.getId();
		}
		return 0;
	}
	
	//手动加上，必须加上
	@Override
	public int hashCode()
	{
		String in = this.getId() + this.getTitle();  
		return in.hashCode();
	}

	@Override
	public boolean equals(Object o)
	{
		Activity activity = (Activity) o;
		return activity.getId().equals(this.getId());
	}
}
