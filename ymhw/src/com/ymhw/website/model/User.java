package com.ymhw.website.model;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.ymhw.website.model.base.BaseUser;
import com.ymhw.website.utils.Constant;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User>
{
	public static final User dao = new User();
	
	public User getUserById(int userId) {
		return dao.findFirst("select * from user where isValid = 1");
	}
	
	/**
	 *  验证是否已经被注册
	 * @param input 注册值
	 * @param type  注册类型（1-账号注册 2-邮箱  3-手机号码注册）
	 */
	public boolean queryRegisterdInfo(String input,int type)
	{
		String sql = "select * from user where isValid = 1 and ";
		switch (type)
		{
			case Constant.REGIST_ACCOUNT_TYPE:
				sql += "account = ?";
				break;
			case Constant.REGIST_EMAIL_TYPE:
				sql += "email = ?";
				break;
			case Constant.REGIST_TELPHONE_TYPE:
				sql += "telphone = ?";
				break;
			default:
				break;
		}
		
		User objUser = User.dao.findFirst(sql,input);
		return objUser != null ? true :false;
	}
	
	/**
	 * 根据账户、手机号码、邮箱账号查询用户信息
	 * @param input
	 * @param type
	 * @return
	 */
	public User queryUserInfo(String input,int type)
	{
		String sql = "select * from user where isValid = 1 and ";
		switch (type)
		{
			case Constant.REGIST_ACCOUNT_TYPE:
				sql += "account = ?";
				break;
			case Constant.REGIST_EMAIL_TYPE:
				sql += "email = ?";
				break;
			case Constant.REGIST_TELPHONE_TYPE:
				sql += "telphone = ?";
				break;
			default:
				break;
		}
		
		User objUser = User.dao.findFirst(sql,input);
		return objUser;
	}
	
	/**
	 * 通过账户/邮箱/手机号码 查询
	 * @param input
	 * @param validStatus  是否激活
	 * @return
	 */
	public User queryUserByInput(String input,int validStatus)
	{
		if (validStatus == Constant.VALID) 
		{
			return dao.findFirst("select * from user where isValid = 1 and  (account = ? or email = ? or telphone = ?)", input,input,input);
		}
		else
		{
			return dao.findFirst("select * from user where isValid = 0 and  (account = ? or email = ? or telphone = ?)", input,input,input);			
		}		
	}
	
	/**
	 *  通过账户/邮箱/手机号码 登录
	 * @param input
	 * @param password
	 * @return
	 */
	public User queryLoginUser(String input,String password)
	{
		return dao.findFirst("select * from user where isValid = 1 and password = ? and  (account = ? or email = ? or telphone = ?)",password, input,input,input);
	}
	
	/**
	 * 主页推荐的领队
	 * @param topNum
	 * @return
	 */
	public List<User> queryTopLeaders(int topNum)
	{
		return dao.find("select headshot,account,motto from user where isValid = 1 and roleId = 2 limit ?",topNum);
	}
	
	/**
	 * 接口，下拉列表中数据（id,account,name）
	 * @return
	 */
	public List<User> queryAllLeaders(int num)
	{
		if (num == 0)
		{
			return dao.find("select id,account,name,headshot,motto,praisedNum from user where isValid = 1 and roleId = 2");
		}
		return dao.find("select id,account,name,headshot,motto,praisedNum from user where isValid = 1 and roleId = 2 limit ?", num);
	}
	
	/**
	 * 待审核领队
	 * @return
	 */
	public List<User> queryCheckLeaders()
	{
		return dao.find("select id,account,name,email,telphone from user where isValid = 1 and checkStatus = 1 order by id DESC");
	}
	
	/**
	 * 待审核
	 * @param id
	 * @return
	 */
	public User queryCheckLeader(int id)
	{
		return dao.findFirst("select * from user where isValid = 1 and checkStatus = 1 and id = ?", id);
	}
	
	/**
	 * 审核失败
	 * @param id
	 * @return
	 */
	public User queryCheckFailLeader(int id)
	{
		return dao.findFirst("select * from user where isValid = 1 and checkStatus = 2 and id = ?", id);
	}
	
	public User queryValidLeader(int id)
	{
		return dao.findFirst("select * from user where isValid = 1  and id = ?", id);
	}
	
	public List<User> queryAllSeller() {
		return dao.find("select * from user where isValid = 1 and checkStatus = 3 and roleId = 4");
	}
	
	public Set<String> findRoles(String input)
	{
		Set<String> roles = new HashSet<String>();
		
		List<Record> records = Db.find("select r.code  from user u,role r where u.isValid = 1 and r.isValid = 1 and u.roleId = r.id and (u.account = ? or u.email = ? or u.telphone = ?)", input,input,input);
		for (Record record : records)
		{
			roles.add(record.getStr("code"));
		}
		return roles;
	}
	
	public Set<String> findPermissions(String input)
	{
		Set<String> permissions = new HashSet<String>();
		String sql = "SELECT p.permissionCode FROM role_permission rp,permission p WHERE "
				+ "rp.roleId = (SELECT roleId from user where isValid = 1 and (account = ? or email = ? or telphone = ?)) "
				+ "and rp.permissionId = p.id";

		List<Record> records = Db.find(sql, input,input,input);
		for (Record record : records)
		{
			permissions.add(record.getStr("permissionCode"));
		}
		return permissions;
	}
	
	public List<User> getAll() {
		return dao.find("select * from `user` where isValid = 1");
	}
	
	public Page<User> paginateByCondition(int pageNumber, int pageSize, int roleId, String keyword) { 
		String sql = "";
		if (roleId == 0 && StrKit.isBlank(keyword)) {
			sql = "select * from `user` where isValid = 1";
			return dao.paginate(pageNumber, pageSize, sql);
		} else if (roleId != 0 && StrKit.isBlank(keyword)) {
			sql = "select * from `user` where isValid = 1 and roleId = ?";
			return dao.paginate(pageNumber, pageSize, sql, roleId);
		} else if (roleId == 0 && !StrKit.isBlank(keyword)) {
			sql = "select * from `user` where isValid = 1  and (account like ? or email like ? or telphone like ?)";
			return dao.paginate(pageNumber, pageSize, sql, "%"+keyword+"%", "%"+keyword+"%", "%"+keyword+"%");
		} else {
			sql = "select * from `user` where isValid = 1  and roleId = ? and (account like ? or email like ? or telphone like ?)";
			return dao.paginate(pageNumber, pageSize, sql, roleId, "%"+keyword+"%", "%"+keyword+"%", "%"+keyword+"%");
		}
	}
	
}
